#installare pacchetto ha proxy & openssl-devel

yum install haproxy -y  yum -y install openssl-devel

#abilitarlo al boot e startare il servizio

systemctl enable haproxy.service && systemctl start haproxy.service

#inserire in /etc/hosts i FQDN del load balancer (106) e dei real-server (backend-reverse proxy 104-105)

cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
172.25.0.106 nov25c106.rm.it.noverca.com nov25c106
172.25.0.104 nov25c104.rm.it.noverca.com nov25c104
172.25.0.105 nov25c105.rm.it.noverca.com nov25c105

# configurazione fronte-end http haproxy.cfg 

#---------------------------------------------------------------------
# FrontEnd Configuration
#---------------------------------------------------------------------
frontend main
    bind *:80
    option http-server-close
    option forwardfor
    default_backend app-main

# configurazione back-end roundrobin

#---------------------------------------------------------------------
# BackEnd roundrobin as balance algorithm
#---------------------------------------------------------------------
backend app-main
    balance roundrobin                                     #Balance algorithm
    option httpchk HEAD / HTTP/1.1
Host: localhost    #Check the server application is up and healty - 200 status code
    server nov25c104 172.25.0.104:80 check                 #nov25c104 
    server nov25c105 172.25.0.105:80 check                 #nov25c105

# configurazione proxy monitory stats (pannello)

#HAProxy Monitoring Config
listen  stats   172.25.0.106:1936
        mode            http
        log             global
        maxconn 10
        clitimeout      100s
        srvtimeout      100s
        contimeout      100s
        timeout queue   100s
        stats enable
        stats hide-version
        stats refresh 30s
        stats show-node
        stats auth admin:adm1n
        stats uri  /haproxy?stats

# generare certificato self-signed

openssl req -x509 -nodes -newkey rsa:2048 -keyout /etc/pki/tls/certs/haproxy.pem -out /etc/pki/tls/certs/haproxy.pem -days 365

e  dare permessi 

chmod 600 haproxy.pem

# configurazione per https-ssl

frontend www-https
   bind 172.25.0.106:443 ssl crt /etc/pki/tls/certs/haproxy.pem
   reqadd X-Forwarded-Proto: https
#   acl letsencrypt-acl path_beg /.well-known/acme-challenge/
#   use_backend letsencrypt-backend if letsencrypt-acl
   default_backend www-backend
backend www-backend
   redirect scheme https if !{ ssl_fc }
   server nov25c104 172.25.0.104:443 check
   server nov25c105 172.25.0.105:443 check

# testare certificato

openssl s_client -connect 172.25.0.106:443 -CAfile /etc/pki/tls/certs/haproxy.pem


# se ci sono le seguenti voci ripulire haproxy.cfg e commentare/eliminare (non servono):

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
#frontend  main *:5000
#    acl url_static       path_beg       -i /static /images /javascript /stylesheets
#    acl url_static       path_end       -i .jpg .gif .png .css .js
#    use_backend static          if url_static
#    default_backend             app
#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
#backend static
#    balance     roundrobin
#    server      static 127.0.0.1:4331 check
#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
#backend app
#    balance     roundrobin
 #   server  app1 127.0.0.1:5001 check
  #  server  app2 127.0.0.1:5002 check
   # server  app3 127.0.0.1:5003 check
    #server  app4 127.0.0.1:5004 check

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
#defaults
#    mode                    http
#    log                     global
#    option                  httplog
#    option                  dontlognull
#    option http-server-close
#    option forwardfor       except 127.0.0.0/8
#    option                  redispatch
#    retries                 3
#    timeout http-request    10s
#    timeout queue           1m
#    timeout connect         10s
#    timeout client          1m
   timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000


# verificare se le porte 80 e 433 sono in ascolto:

[root@nov25c106 tmp]# netstat -na | grep 443
tcp        0      0 172.25.0.106:443        0.0.0.0:*               LISTEN
[root@nov25c106 tmp]# netstat -na | grep 80
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN
tcp        0      1 172.25.0.106:47802      172.25.0.105:443        SYN_SENT
tcp        0      1 172.25.0.106:60290      172.25.0.105:80         SYN_SENT
unix  2      [ ACC ]     STREAM     LISTENING     19680    private/scache
unix  3      [ ]         STREAM     CONNECTED     15580    /run/systemd/journal/stdout
unix  2      [ ]         DGRAM                    15806
unix  3      [ ]         STREAM     CONNECTED     18980

# abilitare log haproxy su rsyslog

Decommentare in rsyslog.conf

# Provides UDP syslog reception
$ModLoad imudp
$UDPServerRun 514  

Se non c'è creare haproxy.conf  oppure aggiungere le righe di seguito sotto /etc/rsyslog.d/haproxy.conf:

local2.=info     /var/log/haproxy-access.log    #For Access Log
local2.notice    /var/log/haproxy-info.log      #For Service Info - Backend, loadbalancer

Restartare rsyslog

# abilitare log in haproxy.cfg

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon
    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

# log per analisi

/var/run/haproxy-info.log e haproxy-access.log

# testare httpd

yum -y install elinks 
elinks http://172.25.0.106:1936/haproxy?stats
elinks http://172.25.0.106

Lanciando elinks http://172.25.0.106 secondo le modalità di round-robin l'HA-Proxy bilancerà un nodo alla volta, per fare questo ho creato sui due server
reverse proxy sotto /var/www/html/index.html due pagine con i FQDN (nov25c104.rm.it.noverca.com e nov25c105.rm.it.noverca.com) in modo che
ogni volta che chiama un nodo o l'altro apparira l'index.html


# certificato wildcard noverca

Presi i certificati gia creati da un altro server (104)

novercacomWildcard.key
novercacomWildcard.crt

# creato pem unendo key+crt ovvero chiave pubblica + privata

cat novercacomWildcard.key > haproxy.pem
cat novercacomWildcard.crt >> haproxy.pem

poi va spostato haproxy.pem sotto /etc/pki/tls/certs/

dare la CA al client che chiama il load balancer: 
TrustTechnologiesRoot.cer

# verifica https wildcard

openssl s_client -connect 172.25.0.106:443 -CAfile /tmp/TrustTechnologiesRoot.cer

